<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhita.dao.manage.StatisticsDao" >

			
			<insert id="AddBankcard" parameterType="com.zhita.model.manage.Bankcard">
				INSERT INTO `bankcard`
				(
				userId,
				attestationStatus,
				bankcardName,
				bankcardTypeId,
				tiedCardPhone,
				deleted,
				IDcardnumber,
				cstmrnm,
				authentime
				)VALUES(#{userId},#{attestationStatus},#{bankcardName},#{bankcardTypeId},#{tiedCardPhone},#{deleted},#{IDcardnumber},#{cstmrnm},#{authentime})
			</insert>
			
			
			
			<select id="SelectTrxId" parameterType="com.zhita.model.manage.Bankcard" resultType="java.lang.Integer">
				select id from bankcard where userId = #{userId} AND bankcardName = #{bankcardName} AND tiedCardPhone = #{tiedCardPhone}
				and attestationStatus = "1"
			</select>
			
			
			
			<update id="UpdateStatu" parameterType="java.lang.Integer">
				update bankcard set attestationStatus = "1" where userId = #{id}
			</update>
			
			
			
			<update id="UpdateOrders" parameterType="com.zhita.model.manage.Orders">
				update orders set orderStatus = "3",realtime = #{realtime} where orderNumber = #{orderNumber}
			</update>
			
			
			<insert id="AddRepay" parameterType="com.zhita.model.manage.Repayment">
				INSERT INTO `repayment`(
					orderId,
					repaymentMoney,
					repaymentDate,
					thirdparty_id,
					collectionMemberId,
					cardnumber,
					pipelinenumber,
					statu,
					reoaybtai
				)VALUES(#{orderid},#{repaymentMoney},#{repaymentDate},#{thirdparty_id},#{collectionMemberId},#{cardnumber},#{pipelinenumber},#{statu},#{reoaybtai})
			</insert>
			
			<select id="SelectDefeDay" parameterType="java.lang.Integer" resultType="java.lang.Integer">
				select onceDeferredDay from deferred_settings where companyId = #{companyId}
			</select>
			
			
			<insert id="AddDeferred" parameterType="com.zhita.model.manage.Deferred">
				INSERT INTO `deferred`
				(
				orderid,
				interestOnArrears,
				deferBeforeReturntime,
				postponeDate,
				deferAfterReturntime,
				deferredTime,
				deleted
				)VALUES(#{orderid},#{interestOnArrears},#{deferBeforeReturntime},#{postponeDate},#{deferAfterReturntime},#{deferredTime},#{deleted})
			</insert>



			<select id="SelectUserdelayTimes" parameterType="java.lang.Integer" resultType="java.lang.Integer">
				select delayTimes from user where id = #{userId}
			</select>
			
			
			<update id="UpdateUser" parameterType="com.zhita.model.manage.Orders">
				update user set delayTimes = #{chenggNum} where id = #{userId}
			</update>
			
			
			<update id="DefeOrder" parameterType="com.zhita.model.manage.Orders">
				update orders set shouldReturnTime = #{shouldReturnTime},orderStatus = "2" where id = #{id}
			</update>
			
			
			<select id="SelectOrderId" parameterType="java.lang.String" resultType="com.zhita.model.manage.Orders">
				select id,companyId,userId from orders where orderNumber = #{orderNumber}
			</select>
			
			
			<insert id="AddPaymentRecord" parameterType="com.zhita.model.manage.Payment_record">
				INSERT INTO `payment_record`
				(
				orderId,
				remittanceTime,
				professionalWork,
				status,
				thirdparty_id,
				paymentmoney,
				paymentbtiao,
				cardnumber,
				pipelinenumber,
				deleted
				)VALUES(#{orderId},#{remittanceTime},#{professionalWork},#{status},#{thirdparty_id},#{paymentmoney},#{paymentbtiao},#{cardnumber},#{pipelinenumber},#{deleted})
			</insert>
			
			
			<update id="UpdatePaymentrecord" parameterType="com.zhita.model.manage.Payment_record" >
				update payment_record set orderId = #{orderId} where pipelinenumber = #{pipelinenumber}
			</update>
			
			
			<select id="SelectBanl" parameterType="com.zhita.model.manage.Bankcard" resultType="com.zhita.model.manage.Bankcard">
				select baty.bankcardTypeName,ban.bankcardName,ban.tiedCardPhone,ban.cstmrnm from bankcard ban,bankcard_type baty,user u 
				where ban.bankcardTypeId = baty.id and baty.companyId = #{companyId} and u.id = ban.userId and  ban.userId = #{userId}
			</select>
			
			
			
			<select id="UserAll" parameterType="java.lang.Integer" resultType="java.lang.String">
				select idcard_number from user_attestation where userId = #{userId}
			</select>
			
			
			<select id="AllBanl" parameterType="com.zhita.model.manage.Orderdetails" resultType="com.zhita.model.manage.Orderdetails">
				select ord.orderId,o.orderNumber,o.userId,usea.trueName,u.phone,bank.bankcardName,o.borrowMoneyWay,o.borrowTimeLimit,o.orderCreateTime,
				ord.realityBorrowMoney,ord.makeLoans,defe.deferAfterReturntime,o.overdueGrade,ord.overdueNumberOfDays,ord.interestPenaltySum,
				ord.surplus_money,ord.realityAccount
				from orders o,orderdetails ord,deferred defe,bankcard bank,user u,user_attestation usea 
				<where>
					o.id = ord.orderId
					and u.id = o.userId
					and u.id = usea.userId
					and o.id = defe.orderId
					and u.id = bank.userId
					and o.orderStatus = "1"
					and o.companyId = #{companyId}
					<if test="orderNumber != null and orderNumber != ''">
						and o.orderNumber = #{orderNumber}
					</if>
					<if test="trueName != '' and trueName != null">
						AND usea.trueName like CONCAT(CONCAT('%',#{trueName}),'%') 
					</if>
					<if test="phone != null and phone != ''">
						AND u.phone like CONCAT(CONCAT('%',#{phone}),'%') 
					</if>
					<if test="bankcardName != null and bankcardName != ''">
						AND bank.bankcardName like CONCAT(CONCAT('%',#{bankcardName}),'%') 
					</if>
					<if test="start_time != null and start_time != '' and end_time != null and end_time != ''">
						AND u.registeTime between #{start_time} and #{end_time}
					</if>
					<if test="orderCreateTimeStatu_time != null and orderCreateTimeEnd_time != '' and orderCreateTimeStatu_time != '' and orderCreateTimeEnd_time != null">
						AND o.orderCreateTime between #{orderCreateTimeStatu_time} and #{orderCreateTimeEnd_time}
					</if>
					<if test="deferAfterReturntimeStatu_time != null and deferAfterReturntimeStatu_time != '' and deferAfterReturntimeEnd_time != '' and deferAfterReturntimeEnd_time != null">
						AND defe.deferAfterReturntime between #{deferAfterReturntimeStatu_time} and #{deferAfterReturntimeEnd_time}
					</if>
					<if test="overdueGrade != null and overdueGrade != ''">
						AND o.overdueGrade = #{overdueGrade}
					</if>
				</where>
				GROUP BY ord.orderId
				limit #{page},#{pagesize}
			</select>
			
			
			<select id="OrderCollectionNum" parameterType="java.lang.Integer" resultType="java.lang.Integer">
				select count(id) from orders where companyId = #{companyId}
			</select>
			
			
			
			<insert id="Addbankdeduction" parameterType="com.zhita.model.manage.Bankdeductions">
				INSERT INTO `bankdeductions`
				(
				sys_userId,
				deductionproportion,
				orderId,
				userId,
				deductionstatus,
				deduction_money,
				deduction_time
				)VALUES(#{sys_userId},#{deductionproportion},#{orderId},#{userId},#{deductionstatus},#{deduction_money},#{deduction_time})
			</insert>
			
			
			<update id="UpdateBank" parameterType="com.zhita.model.manage.Bankdeductions">
				update Bankdeductions set deductionstatus = #{deductionstatus} where orderId = #{orderId} and deduction_time = #{deduction_time}
			</update>
			
			
			
			<select id="AllBank" parameterType="com.zhita.model.manage.Bankcard" resultType="com.zhita.model.manage.Bankdeductions">
				select ban.deduction_time,sy.account,ban.deductionproportion,count(ban.id) as userNum,ban.sys_userId
				from sys_user sy,bankdeductions ban 
				<where>
				 ban.sys_userId = sy.userId 
				 and sy.companyId = #{companyId}
				 <if test="statu_time != null and statu_time != '' and end_time != null and end_time != ''">
				 	and ban.deduction_time between #{statu_time} and #{end_time}
				 </if>
				 </where>
				 group by sy.userId
				 limit #{page},#{pagesize}
			</select>
			
			
			<select id="ChenggNum" parameterType="com.zhita.model.manage.Bankdeductions" resultType="java.lang.Integer">
				select count(id) from bankdeductions where sys_userId = #{sys_userId} and deduction_time = #{deduction_time} and deductionstatus = "扣款成功"
			</select>
			
			
			
			
			<select id="ChenggMoney" parameterType="com.zhita.model.manage.Bankdeductions" resultType="java.math.BigDecimal">
				select sum(deduction_money) from bankdeductions where sys_userId = #{sys_userId} and deduction_time = #{deduction_time} 
			</select>
			
			
			<select id="Bankdeail" parameterType="com.zhita.model.manage.Bankdeductions" resultType="com.zhita.model.manage.Bankdeductions">
				select ban.deduction_time,ban.deductionproportion,ban.deduction_money from bankdeductions ban,orders o
				where ban.orderId = #{orderId} AND o.companyId = #{companyId}
			</select>
			
			
			
			<select id="Deails" parameterType="com.zhita.model.manage.Bankdeductions" resultType="com.zhita.model.manage.Bankdeductions">
				select ban.deduction_time,u.name,ord.surplus_money,ban.deductionproportion,ban.deduction_money from bankdeductions ban,user u,orders o,orderdetails ord
				where o.userId = u.id and o.id = ord.orderId and o.id = ban.orderId and o.companyId = #{companyId} and ban.deduction_time = #{deduction_time} and ban.sys_userId = #{sys_userId}
			</select>
			
			
			
			<select id="OneOrders" parameterType="com.zhita.model.manage.Orders" resultType="com.zhita.model.manage.Orders">
				select o.*,ord.surplus_money,ord.realityBorrowMoney from orders o,orderdetails ord where o.id = ord.orderId
				and o.companyId = #{companyId} and o.id = #{id} 
			</select>
			
			
			<update id="UpdateOrderSuperl" parameterType="com.zhita.model.manage.Orders">
				update orderdetails set realityAccount = #{realityAccount} where id = #{id}
			</update>
			
			<select id="SelectTotalCount" parameterType="com.zhita.model.manage.Bankdeductions" resultType="java.lang.Integer">
				select count(ban.id) from bankdeductions ban,sys_user sy where sy.userId = ban.sys_userId and sy.companyId = #{companyId}
			</select>
			
			
			<select id="AllBan" parameterType="com.zhita.model.manage.Bankdeductions" resultType="com.zhita.model.manage.Bankdeductions">
				select deduction_time,deductionproportion,deduction_money from bankdeductions where orderId = #{orderId}
			</select>
			
			
			<select id="SelectChengMoney" parameterType="com.zhita.model.manage.Bankdeductions" resultType="java.math.BigDecimal">
				SELECT sum(ban.deduction_money) FROM bankdeductions ban,sys_user sy WHERE ( datediff ( deduction_time , #{deduction_time} ) = 0 ) and
				sy.userId = ban.sys_userId and sy.companyId = #{companyId} and deductionstatus = "扣款成功"
			</select>
			
			
			<select id="SelectBankKoukuan" parameterType="com.zhita.model.manage.Bankdeductions" resultType="com.zhita.model.manage.Bankdeductions">
				select ban.deduction_time,u.name,ord.realityBorrowMoney,ord.interestPenaltySum,ban.deductionproportion,ban.deduction_money
				from user u,orders o,orderdetails ord,bankdeductions ban where o.id = ban.orderId and o.userId = u.id and o.id = ord.orderId
				and ban.deduction_time = #{deduction_time} and ban.sys_userId = #{sys_userId}
			</select>
			
			
			<delete id="DeleteChan" parameterType="java.lang.Integer">
				delete from bankcard where userId = #{userId}
			</delete>
			
			
			<select id="SelectUserId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
				select id from bankcard where userId = #{userId} and attestationStatus = "1"
			</select>
			
			
			<select id="SelectDefeBefore" parameterType="java.lang.Integer" resultType="java.lang.String">
				select shouldReturnTime from orders where id = #{orderId}
			</select>
			
			
			
			<select id="DefeDefeAfertime" parameterType="java.lang.Integer" resultType="java.lang.String">
				SELECT deferAfterReturntime from deferred where id = (SELECT max(id) FROM deferred WHERE orderid = #{orderId});
			</select>
			
			
			<select id="SelectLoanStatus" parameterType="java.lang.Integer" resultType="java.lang.String">
				select status from loan_setting where companyId = #{companyId}
			</select>
			
			
			<select id="SelectMaxMoney" parameterType="java.lang.Integer" resultType="java.lang.Integer">
				select maxthresholdvalue from loan_thresholdvalue where companyId = #{companyId}
			</select>
			
			
			<select id="SumPayMoney" parameterType="com.zhita.model.manage.Orderdetails" resultType="java.math.BigDecimal">
				select sum(pay.paymentmoney) from payment_record pay,orders o where o.id = pay.orderId and o.companyId = #{companyId}
				and pay.remittanceTime between #{start_time} and #{end_time}
			</select>
			
			
			<select id="SelectOrders" parameterType="java.lang.Integer" resultType="java.lang.Integer">
				select id from orders where userId = #{userId} and orderStatus != "3"
			</select>
			
			
			<select id="Cardnumber" parameterType="java.lang.Integer" resultType="java.lang.String">
				select bankcardName from bankcard where userId= #{userId}
			</select>
			
			
			<select id="SelectBorrowing" parameterType="java.lang.Integer" resultType="java.lang.String">
				select borrowingScheme from borrow_money_message where companyId = #{companyId}
			</select>
			
			
			<select id="SelectRepaymentOrderId" parameterType="java.lang.String" resultType="java.lang.Integer">
				select re.orderId from repayment re,orders o where o.id = re.orderId and o.orderNumber = #{orderNumber} and statu = "成功"
			</select>
			
			
			<update id="UpdateRepaystatus" parameterType="java.lang.String">
				update repayment set statu = "成功" where pipelinenumber = #{pipelinenu}
			</update>
			
			
			
			<update id="UpdatehowMany" parameterType="java.lang.Integer">
				update user set howManyTimesBorMoney=howManyTimesBorMoney+1 WHERE id = #{userId}
			</update>
			
			
			
			<select id="SelectUpdateShouldMoney" parameterType="java.lang.Integer" resultType="java.math.BigDecimal">
				select shouldReapyMoney from orderdetails where orderId = #{orderId}
			</select>
			
			
			
			<update id="UpdateOrdersShouldMoney" parameterType="com.zhita.model.manage.Orderdetails">
				update orderdetails set shouldReapyMoney = #{shouldReapyMoney} where orderId = #{orderId}
			</update>
</mapper>